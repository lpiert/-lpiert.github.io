muduo采用CMake为build system，安装方法如下：
$ sudo apt-get install cmake

muduo依赖于Boost，也很容易安装：
$ sudo apt-get install libboost-dev libboost-test-dev

muduo有三个非必需的依赖库：curl、c-ares DNS、Google Protobuf，如果安装了这三个库，cmake会自动多编译一些示例。安装方法如下：
$ sudo apt-get install libcurl4-openssl-dev libc-ares-dev
$ sudo apt-get install protobuf-compiler libprotobuf-dev

muduo的编译方法很简单：
$ tar zxf muduo-0.8.2-beta.tar.gz
$ cd muduo/
$ ./build.sh -j2
编译muduo 库和它自带的例子，生成的可执行文件和静态库文件
分别位于../build/debug/{bin,lib}
$ ./build.sh install
以上命令将muduo 头文件和库文件安装到../build/debug-install/{include,lib}，以便muduo-protorpc 和muduo-udns 等库使用

如果要编译release版（以-O2优化），可执行：
$ BUILD_TYPE=release ./build.sh -j2

编译muduo 库和它自带的例子，生成的可执行文件和静态库文件
分别位于../build/release/{bin,lib}
$ BUILD_TYPE=release ./build.sh install
以上命令将muduo 头文件和库文件安装到../build/release-install/{include,lib}，以便muduo-protorpc 和muduo-udns 等库使用

在muduo 1.0正式发布之后，BUILD_TYPE的默认值会改成release。

编译完成之后请试运行其中的例子，比如bin/inspector_test，然后通过浏览器访问http://10.0.0.10:12345/或http://10.0.0.10:12345/proc/status，其中10.0.0.10替换为你的Linuxbox的IP。

在自己的程序中使用muduo

muduo是静态链接的C++程序库，使用muduo库的时候，只需要设置好头文件路径（例如../build/debug-install/include）和库文件路径（例如../build/debug-install/lib）并链接相应的静态库文件（-lmuduo_net -lmuduo_base）即可。下面这个示范项目展示了如何使用CMake和普通makefile编译基于muduo的程序：https://github.com/chenshuo/muduo-tutorial



注意：如果要在编译程序的时候不带include和lib的路径，直接执行拷贝cp -r muduo /usr/include/ 将build/debug-install/include/muduo拷贝到/usr/include下。
  和 cp * /usr/lib把build/debug-install/lib下的库拷贝到/usr/lib下
  


error：
Unable to find the Boost header files. Please set BOOST_ROOT to the root..............

measure:

sudo apt-get install cmake libblkid-dev e2fslibs-dev libboost-all-dev libaudit-dev
muduo 安装后使用头文件包含 静态库链接:

![muduo_demo](https://github.com/lpiert/lpiert.github.io/blob/master/image/muduo_installed_demo.png）
